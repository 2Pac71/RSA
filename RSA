import java.math.BigInteger;
import java.util.Random;
import java.util.StringTokenizer;
import java.util.Vector;
import java.util.Scanner;

public class RSA {
    private static final String TOKEN = ";";

    public static void main(String[] args) {
        Scanner inp = new Scanner(System.in);
        System.out.println("Inserisci la stringa da crittografare:");
        String stringa = inp.nextLine();

        Random rng = new Random();

        BigInteger p = BigInteger.probablePrime(1024, rng);
        BigInteger q = BigInteger.probablePrime(1024, rng);
        BigInteger n = p.multiply(q);
        BigInteger v = q.subtract(BigInteger.ONE).multiply(p.subtract(BigInteger.ONE));
        BigInteger e = coPrimo(v);
        BigInteger d = e.modInverse(v);

        System.out.println("P: " + p + "\n Q: " + q + "\n n: " + n + "\n V: " + v + "\n e: " + e + "\n d: " + d);

        String stringaCriptata = encrypt(stringa, e, n);
        System.out.println("Stringa criptata: " + stringaCriptata);

        String stringaDecriptata = decrypt(stringaCriptata, d, n);
        System.out.println("Stringa decriptata: " + stringaDecriptata);

        inp.close();
    }

    private static String encrypt(String stringa, BigInteger e, BigInteger n) {
    Vector<BigInteger> intVector = new Vector<>();
    StringBuilder lista = new StringBuilder();

    char[] charRawVector = new char[stringa.length()];
    stringa.getChars(0, stringa.length(), charRawVector, 0);
    
    for (char character : charRawVector) {
        int i = (int) character;
        if (i != 13) {
            BigInteger c = new BigInteger(Integer.toString(i)).modPow(e, n);
            intVector.add(new BigInteger(Integer.toString(i)));
            lista.append(c);
            lista.append(TOKEN);
        } else {
            lista.append("\n");
        }
    }

    return lista.toString();
}

    private static String decrypt(String stringa, BigInteger d, BigInteger n) {
        StringTokenizer token = new StringTokenizer(stringa, TOKEN);
        StringBuilder stringList = new StringBuilder();

        while (token.hasMoreTokens()) {
            String s = token.nextToken();
            if (!s.isEmpty()) {
                BigInteger c = new BigInteger(s);
                BigInteger m = c.modPow(d, n);
                stringList.append((char) m.intValue());
            }
        }

        return stringList.toString();
    }
    private static BigInteger coPrimo(BigInteger p) {
        BigInteger coPrimo;
        Random rng = new Random();
        while ((coPrimo = BigInteger.probablePrime(1024, rng)).compareTo(p) > 0) {
        }
        return coPrimo;
    }
}
